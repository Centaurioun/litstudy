from .types import DocumentMapping, DocumentSet
from collections import defaultdict
import json
import numpy as np
import networkx as nx
import pyvis
import textwrap


def plot_network(g: nx.Graph, *, height='1000px', smooth_edges=None,
                 max_node_size=100, min_node_size=5, largest_component=True,
                 **kwargs):
    """Plot a `networkx.Graph` generated by one of the `build_X_graph`
    functions in this module. Plotting is done using the `pyvis` library.


    :param height: Height of the plot.
    :param smooth_edges: Enables curved ('smooth') edges. Looks nice but is
                         heavy on performance.
    :param min_node_size: The radius of the smallest node.
    :param max_node_size: The radius of the largest node.
    :param largest_component: Only plot the largest connected component of the graph.
    """
    if isolates := list(nx.isolates(g)):
        g = g.copy()
        g.remove_nodes_from(isolates)

    if len(g.edges) == 0:
        print('no edges given')
        return

    directed = nx.is_directed(g)

    if largest_component:
        if directed:
            cc = nx.weakly_connected_components(g)
        else:
            cc = nx.connected_components(g)

        cc = sorted(cc, key=len, reverse=True)
        g = g.subgraph(cc[0])

    v = pyvis.network.Network(
            notebook=True,
            width='100%',
            height=height,
            directed=directed
    )

    sizes = [attr.get('weight') for (_, attr) in g.nodes.items()]

    if all(s is not None for s in sizes):
        sizes = np.array(sizes)
    elif directed:
        sizes = [g for (_, g) in g.in_degree]
    else:
        sizes = [g for (_, g) in g.degree]

    sizes = np.array(sizes, dtype=np.float32)
    ratio = (max_node_size - min_node_size) / np.amax(sizes)
    sizes = ratio * sizes + min_node_size

    for id, size in zip(g, sizes):
        attr = g.nodes[id]
        v.add_node(
                id,
                title=attr['title'],
                label=textwrap.fill(attr['title'], width=20),
                shape='dot',
                size=float(size),
                color=attr.get('color'),
                labelHighlightBold=True,
        )

    for src, dst in g.edges():
        weight = g[src][dst].get('weight')
        if weight is not None:
            width = weight
            label = str(weight)
        else:
            width = None
            label = ''

        v.add_edge(src, dst, width=width, title=label)

    if smooth_edges is None:
        smooth_edges = len(g.edges()) < 1000

    v.set_options(json.dumps({
        'configure': {
            'enabled': True,
        },
        'nodes': {
            'font': {
                'size': 7,
            }
        },
        'edges': {
            'smooth': smooth_edges,
            'color': {
                'opacity': 0.25,
            }
        },
        'physics': {
            'forceAtlas2Based': {
                'springLength': 100,
            },
            'solver': 'forceAtlas2Based',
        }
    }))

    return v.show('citation.html')


def build_base_network(docs, directed):
    g = nx.DiGraph() if directed else nx.Graph()
    mapping = DocumentMapping()

    for i, doc in enumerate(docs):
        g.add_node(i, title=doc.title, doc=doc)
        mapping.add(doc.id, i)

    return g, mapping


def build_citation_network(docs: DocumentSet) -> nx.Graph:
    """Builds a citation network: a directed graph where each node
    corresponds to a document and each directed edge indicates that
    one document cites the other."""
    g, mapping = build_base_network(docs, True)

    for i, doc in enumerate(docs):
        for ref in doc.references or []:
            j = mapping.get(ref)

            if j is not None:
                g.add_edge(i, j)

    return g


def plot_citation_network(docs: DocumentSet, **kwargs):
    """Plot a citation network.

    This is a shorthand for `plot_network(build_citation_network(docs)`."""
    return plot_network(build_citation_network(docs), **kwargs)


def build_cocitation_network(docs: DocumentSet, *, max_edges=None) -> nx.Graph:
    """Builds a co-citation network: a undirected graph where each node
    corresponds to a document and the edge weights stores the cocitation
    strengths (i.e., the number of times two documents have been cited
    together).

    :param max_edges: Select only the top edges. This is useful since
        cocitation networks are often dense and only the strongest edges
        are usually important.
    """
    max_edges = max_edges or len(docs) * 2

    g, mapping = build_base_network(docs, False)
    strength = defaultdict(int)

    for doc in docs:
        refs = []

        for ref in doc.references or []:
            j = mapping.get(ref)

            if j is not None:
                refs.append(j)

        for i in refs:
            for j in refs:
                if i < j:
                    strength[i, j] += 1

    edges = list(strength.items())

    if len(edges) > max_edges:
        edges.sort(key=lambda p: p[1], reverse=True)
        edges = edges[:max_edges]

    for (i, j), weight in edges:
        g.add_edge(i, j, weight=weight)

    return g


def plot_cocitation_network(docs: DocumentSet, *, max_edges=None,
                            node_size=10, **kwargs):
    """Plot a citation network.

    This is a shorthand for `plot_network(build_cocitation_network(docs)`."""
    return plot_network(
            build_cocitation_network(docs, max_edges),
            # min_node_size=node_size,
            # max_node_size=node_size,
            **kwargs
    )


def build_coupling_network(docs: DocumentSet, max_edges=1000) -> nx.Graph:
    """Builds a bibligraphic coupling network: an undirected graph where
    nodes indicate documents and edge weights store the bibliographic
    coupling strength. This strength measures how similar two documents
    view related work. It is measured as the number of shared references
    between two documents.

    :param max_edges: Select only the top edges. This is useful since these
        networks are often dense and only the strongest edges are usually
        important.
    """

    g, mapping = build_base_network(docs, False)
    n = len(g)
    doc_refs = []

    for doc in docs:
        refs = []

        for ref in doc.references or []:
            i = mapping.get(ref)

            if i is None:
                mapping.add(ref, n)
                n += 1
                i = n

            if i is not None:
                refs.append(i)

        doc_refs.append(set(refs))

    strength = defaultdict(int)

    for i, a in enumerate(doc_refs):
        for j, b in enumerate(doc_refs[:i]):
            common = a & b

            if common:
                strength[i, j] = len(common)

    edges = list(strength.items())

    if len(edges) > max_edges:
        edges.sort(key=lambda p: p[1], reverse=True)
        edges = edges[:max_edges]

    for (i, j), weight in edges:
        g.add_edge(i, j, weight=weight, score=weight)

    return g


def plot_coupling_network(docs, max_edges=None, node_size=10, **kwargs):
    """Plot a bibliographic coupling network.

    This is a shorthand for `plot_network(build_coupling_network(docs)`."""
    return plot_network(
            build_coupling_network(docs, max_edges),
            min_node_size=node_size,
            max_node_size=node_size,
            **kwargs
    )


def build_coauthor_network(docs: DocumentSet, *, max_authors=None) -> nx.Graph:
    """Builds a co-author network: an undirected graph where nodes indicate
    authors and edge weight indicate the number of shared publications
    between two authors.

    :param max_authors: Select only the top X authors.
    """
    g = nx.DiGraph()
    count = defaultdict(int)

    for doc in docs:
        authors = []

        for author in doc.authors or []:
            name = author.name

            if name:
                count[name] += 1

    authors = list(count.keys())

    if max_authors is not None and len(authors) > max_authors:
        authors.sort(key=lambda name: count[name], reverse=True)
        authors = authors[:max_authors]

    mapping = dict()
    for i, author in enumerate(authors):
        g.add_node(i, title=author)
        mapping[author] = i

    edges = defaultdict(int)

    for doc in docs:
        authors = [a.name for a in doc.authors or [] if a.name]

        for i, left in enumerate(authors):
            for right in authors[:i]:
                if left in mapping and right in mapping:
                    edges[mapping[left], mapping[right]] += 1

    for (left, right), weight in edges.items():
        g.add_edge(left, right, weight=weight)

    return g


def plot_coauthor_network(docs: DocumentSet, *, max_authors=None):
    """Plot a co-author network.

    This is a shorthand for `plot_network(build_coauthor_network(docs)`."""
    return plot_network(
            build_coauthor_network(docs, max_authors),
    )
